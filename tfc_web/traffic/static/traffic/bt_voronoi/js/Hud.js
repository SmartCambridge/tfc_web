"use strict";

class Hud {
    // Called to create instance in page : space_floorplan = SpaceFloorplan()

    constructor() {

        this.svg_bar_chart = null;
        this.svg_line_graph = null;

        this.bar_clicked = false;

        this.x_scale;
        this.y_scale;

    }

    init(voronoi_viz, url_node) {

        voronoi_viz.hud.show_vertical_bar(voronoi_viz, voronoi_viz.site_db.get_zone_averages(voronoi_viz));
        let selected_date = voronoi_viz.get_url_date();

        if (url_node != '*') {

            let node = voronoi_viz.site_db.get_node_from_acp_id(voronoi_viz, url_node);

            voronoi_viz.site_db.set_selected_node(voronoi_viz, node);

            voronoi_viz.select_cell(voronoi_viz, node.node_acp_id)

            voronoi_viz.hud.show_all(voronoi_viz, voronoi_viz.site_db.get_selected_node(voronoi_viz), selected_date);

        }

        voronoi_viz.hud.show_datepicker(voronoi_viz);
    }

    //---------------------------------------------------//
    //--------------------BAR CHARTS---------------------//
    //---------------------------------------------------//


    show_vertical_bar(voronoi_viz, data) {

        document.getElementById('bar_chart').innerHTML = voronoi_viz.tools.ICON_CLOSE_DIV;
        document.getElementById('bar_chart').style.opacity = 1;

        // set the dimensions and margins of the graph
        let margin = {
                top: 35,
                right: 20,
                bottom: 30,
                left: 40
            },
            width = 220 - margin.left - margin.right,
            height = 220 - margin.top - margin.bottom;

        let x = d3.scaleBand().rangeRound([0, width]).padding(0.1),
            y = d3.scaleLinear().rangeRound([height, 0]);

        voronoi_viz.hud.svg_bar_chart = d3.select("#bar_chart").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");


        x.domain(data.map(function (d) {
            return d.zone;
        }));
        y.domain([0, d3.max(data, function (d) {
            return d.value + 5;
        })]);

        //append title
        voronoi_viz.hud.svg_bar_chart.append("text")
            .attr("x", (width / 2))
            .attr("y", 10 - (margin.top / 2))
            .attr("text-anchor", "middle")
            .style("font-size", "16px")
            .style("text-decoration", "none") //underline  
            .text("Zone Speeds");

        voronoi_viz.hud.svg_bar_chart.append("g")
            .attr("class", "axis axis--x")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x));

        voronoi_viz.hud.svg_bar_chart.append("g")
            .attr("class", "axis axis--y")
            .call(d3.axisLeft(y))
            .append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", "0.71em")
            .attr("text-anchor", "end")
            .text("Frequency");

        // text label for the y axis
        voronoi_viz.hud.svg_bar_chart.append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 0 - margin.left)
            .attr("x", 0 - (height / 2))
            .attr("dy", "1em")
            .style("text-anchor", "middle")
            .text("Speed (MPH)");

        //Add interactivity
        voronoi_viz.hud.svg_bar_chart.selectAll(".bar")
            .data(data)
            .enter().append("rect")
            .attr("class", "bar")
            .attr('id', function (d) {
                return d.zone + '_bar'
            })
            .attr("x", function (d) {
                return x(d.zone);
            })
            .attr("y", function (d) {
                return y(d.value);
            })
            .attr("width", x.bandwidth())
            .attr("height", function (d) {
                return height - y(d.value);
            })
            .style('fill', function (d) {
                return CELL_GROUPS[d.zone]['color']
            })
            .on('mouseover', function (d, i) {
                if (!voronoi_viz.hud.bar_clicked) {

                    voronoi_viz.get_outline(voronoi_viz, d.zone);

                    for (let u = 0; u < voronoi_viz.site_db.zones.length; u++) {
                        if (d.zone != voronoi_viz.site_db.zones[u]) {
                            d3.select('#' + voronoi_viz.site_db.zones[u] + '_bar').transition().duration(250).style('opacity', 0.4)
                        }
                    }
                }
            })
            .on('click', function (d, i) {
                //remove any previous outlines that may have been generated by other clicks
                d3.selectAll('.zone_outline').remove();

                for (let u = 0; u < voronoi_viz.site_db.zones.length; u++) {
                    if (d.zone != voronoi_viz.site_db.zones[u]) {
                        d3.select('#' + voronoi_viz.site_db.zones[u] + '_bar').transition().duration(250).style('opacity', 0.4)
                    }

                }

                voronoi_viz.get_outline(voronoi_viz, d.zone);
                voronoi_viz.hud.get_zone_metadata(voronoi_viz, d.zone)

                voronoi_viz.hud.bar_clicked = !voronoi_viz.hud.bar_clicked;

            })
            .on('dblclick', function (d, i) {
                console.log('DBLCLICK')

            })
            .on('mouseout', function (d, i) {
                if (!voronoi_viz.hud.bar_clicked) {
                    d3.selectAll('.zone_outline').remove();
                    d3.selectAll('.bar').transition().duration(250).style('opacity', 1)
                }

            });

    }

    create_element(voronoi_viz, element_id, position, inner_text) {

        //to be modified with https://stackoverflow.com/questions/33614912/how-to-locate-leaflet-zoom-control-in-a-desired-position
        let new_element = L.control({
            position: position
        }); //{       position: 'bottom'    }
        new_element.onAdd = function (map) {
            this.new_element = L.DomUtil.create('div', 'info'); //has to be of class "info for the nice shade effect"
            this.new_element.id = element_id;
            this.update();

            return this.new_element;
        };
        new_element.update = function (e) {
            if (e === undefined) {
                this.new_element.innerHTML = inner_text == undefined ? '' : voronoi_viz.tools.ICON_CLOSE_DIV + inner_text; //voronoi_viz.voronoi_viz.tools.ICON_CLOSE_DIV + inner_text
                this.new_element.style.opacity = inner_text == undefined ? 0 : 1;
                return;
            }

        };


        return new_element.addTo(voronoi_viz.map);

    }
    show_horizontal_bar(voronoi_viz, data) {

        document.getElementById('bar_chart').innerHTML = voronoi_viz.tools.ICON_CLOSE_DIV;
        document.getElementById('bar_chart').style.opacity = 1;

        // set the dimensions and margins of the graph
        let margin = {
                top: 20,
                right: 20,
                bottom: 30,
                left: 40
            },
            width = 220 - margin.left - margin.right,
            height = 220 - margin.top - margin.bottom;


        // set the ranges
        let y = d3.scaleBand()
            .range([height, 0])
            .padding(0.1);

        let x = d3.scaleLinear()
            .range([0, width]);

        // append the svg object to the body of the page
        // append a 'group' element to 'svg'
        // moves the 'group' element to the top left margin
        voronoi_viz.hud.svg_bar_chart = d3.select("#bar_chart").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        // Scale the range of the data in the domains
        x.domain([0, d3.max(data, function (d) {
            return d.value;
        })])
        y.domain(data.map(function (d) {
            return d.zone;
        }));

        //append title
        voronoi_viz.hud.svg_bar_chart.append("text")
            .attr("x", (width / 2))
            .attr("y", 10 - (margin.top / 2))
            .attr("text-anchor", "middle")
            .style("font-size", "16px")
            .style("text-decoration", "none") //underline  
            .text("Zone Speeds");

        // Add interactivity and
        // append the rectangles for the bar chart
        voronoi_viz.hud.svg_bar_chart.selectAll(".bar")
            .data(data)
            .enter().append("rect")
            .attr('id', function (d) {
                return d.zone + '_bar'
            })
            .attr("class", "bar")
            //.attr("x", function(d) { return x(d.sales); })
            .attr("width", function (d) {
                return x(d.value);
            })
            .attr("y", function (d) {
                return y(d.zone);
            })
            .attr("height", y.bandwidth())
            .style('fill', function (d) {
                return CELL_GROUPS[d.zone]['color']
            })
            .on('mouseover', function (d, i) {
                voronoi_viz.get_outline(voronoi_viz, d.zone);

                for (let u = 0; u < voronoi_viz.site_db.zones.length; u++) {
                    if (d.zone != voronoi_viz.site_db.zones[u]) {
                        d3.select('#' + voronoi_viz.site_db.zones[u] + '_bar').transition().duration(250).style('opacity', 0.4)
                    }
                }
            })
            .on('click', function (d, i) {
                voronoi_viz.get_outline(voronoi_viz, d.zone);
                voronoi_viz.hud.get_zone_metadata(voronoi_viz, d.zone)

            })
            .on('dblclick', function (d, i) { // no double click functionality added
                console.log('DBLCLICK')
            })
            .on('mouseout', function (d, i) {
                d3.selectAll('.zone_outline').remove();
                d3.selectAll('.bar').transition().duration(250).style('opacity', 1)

            });


        // add the x Axis
        voronoi_viz.hud.svg_bar_chart.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x));

        // add the y Axis
        voronoi_viz.hud.svg_bar_chart.append("g")
            .call(d3.axisLeft(y));
    }

    //---------------------------------------------------//
    //-----------------BAR CHARTS END--------------------//
    //---------------------------------------------------//

    get_zone_metadata(voronoi_viz, ZONE) {
        let zone_children = voronoi_viz.site_db.all.filter(x => x.zone === ZONE);
        let child_info = "<b>Inner nodes for:</b> " + "<b style='color:" + CELL_GROUPS[ZONE].color + "'>" + ZONE + "</b>" + "<br>";
        for (let u = 0; u < zone_children.length; u++) {

            let child = zone_children[u];
            let child_speed = child.travelSpeed == null ? 'NA ' : parseInt(child.travelSpeed);
            let child_speed_html = voronoi_viz.tools.HALF_TAB + voronoi_viz.tools.TAB + "Current Speed: " + "<b>" + child_speed + "</b>" + "MPH";

            child_info += "<br>" + "<div class='metadata_zone' id='META_ZONE_" + child.node_acp_id + "'>" + "<i>" + child.name + "</i>" + "</div>" + child_speed_html;
        }

        document.getElementById('zone_table').innerHTML = voronoi_viz.tools.ICON_CLOSE_DIV + child_info;
        document.getElementById('zone_table').style.opacity = 1;

        //Add interactivity
        d3.selectAll('.metadata_zone')
            .on('mouseover', function (d, i) {
                d3.select(this).style('color', CELL_GROUPS[ZONE].color).style('font-weight', 'bold');
                let cell = document.getElementById(this.id.replace('META_ZONE_', ''));
                voronoi_viz.cell_mouseover(cell);
            })

        d3.selectAll('.metadata_zone')
            .on('mouseout', function (d, i) {
                d3.select(this).style('color', 'black').style('font-weight', 'normal');
                let cell = document.getElementById(this.id.replace('META_ZONE_', ''));
                voronoi_viz.cell_mouseout(cell);
            })

        d3.selectAll('.metadata_zone')
            .on('click', function (d, i) {

                //remove zone outlines from when one of the vertical bars was clicked on
                d3.selectAll('.zone_outline').remove();
                //make all vertical bars the same color
                d3.selectAll('.bar').transition().duration(250).style('opacity', 1);

                voronoi_viz.hud.bar_clicked = false;

                let highlighted_cell = voronoi_viz.site_db.get_node_from_acp_id(voronoi_viz, this.id.replace('META_ZONE_', ''));

                //select and highlight cell + show info
                voronoi_viz.select_cell(voronoi_viz, highlighted_cell.node_acp_id)
                voronoi_viz.hud.show_node_information(voronoi_viz, highlighted_cell.node_acp_id)


            })
    }

    //calls for functions that show node information in the bottom left corner
    show_node_information(voronoi_viz, acp_id, START, END) {
        document.getElementById("line_graph").style.opacity = 1;
        document.getElementById("line_graph").innerHTML = voronoi_viz.tools.ICON_LOADING;

        //if no date provided, make the date "today"
        if (START == undefined) {
            START = new Date().toISOString().slice(0, 10)
        }

        //show node data and metadata in bottom left corner
        voronoi_viz.hud.show_node_metadata(voronoi_viz, acp_id)
        voronoi_viz.hud.get_node_data(voronoi_viz, acp_id, START, END)
    }

    //Date naviation bar is invisible by default, and only become visible
    //once a cell has been clicked on, so we change the visibility using the function below
    set_nav_date_visible(opacity) {
        let nav_date_list = document.getElementsByClassName('nav_date')
        for (let i = 0; i < nav_date_list.length; i++) {
            nav_date_list[i].style.opacity = opacity;
        }
    }

    //makes all Hud elements visible
    show_all(voronoi_viz, selected_node, selected_date) {

        //------------------------HUD---------------------------//

        //make HUD elements visible
        document.getElementById("selected_cell").style.opacity = 1;
        document.getElementById("selected_cell").innerHTML = voronoi_viz.tools.ICON_CLOSE_AND_DESELECT + "<br>" + "<h1>" + selected_node.name + "</h1>";
        document.getElementById("datepicker").style.opacity = 1;

        //make the date navigation buttons visible 
        //(made invisible prior since without a cell selection, changing the date does not make sense)
        voronoi_viz.hud.set_nav_date_visible(1);

        //load metadata for the node
        voronoi_viz.hud.show_node_information(voronoi_viz, selected_node.node_acp_id, selected_date);

        //add d3/css styling to the selected cell to make it pop
        voronoi_viz.select_cell(voronoi_viz, selected_node.node_acp_id)

        //open datepicker if clicked on main center date
        document.getElementById('date_now').addEventListener("click", function () {
            document.getElementById('datepicker_input').click();
        });

        //update url and add event listeners for date changes
        voronoi_viz.onchange_feature_select(voronoi_viz, selected_node.node_acp_id, selected_date)
        //------------------------/HUD---------------------------//
    }

    //hides all Hud elements and deselcts all cell
    hide_all(voronoi_viz) {
        document.getElementById("selected_cell").style.opacity = 0;
        document.getElementById("datepicker").style.opacity = 0;
        voronoi_viz.set_nav_date_visible(0);

        //deselect all cells
        voronoi_viz.hud.deselect_all();
    }

    //Initiate the datepicker and show it on the screen
    show_datepicker(voronoi_viz) {

        $('input[name="datefilter"]').daterangepicker({
            showDropdowns: true,
            timePicker: true,
            format: 'dd/mm/yy',
            locale: {
                format: 'DD/MM/YYYY'
            },
            timePickerIncrement: 15,
            opens: "center"
        }, function (start, end, label) {

            console.log('New date range selected: ' + start.format('YYYY-MM-DD') + ' to ' + end.format('YYYY-MM-DD') +
                ' (predefined range: ' + label + ')');

            let start_date = start.format('YYYY-MM-DD');
            let end_date = end.format('YYYY-MM-DD');

            voronoi_viz.update_url(voronoi_viz.site_db.selected_site.node_acp_id, start_date)
            voronoi_viz.hud.show_node_information(voronoi_viz, voronoi_viz.site_db.selected_site.node_acp_id, start_date, end_date);

        });


        $('input[name="datefilter"]').on('apply.daterangepicker', function (ev, picker) {
            $(this).val(picker.startDate.format('YYYY-MM-DD') + ' - ' + picker.endDate.format('YYYY-MM-DD'));
            let start_date = picker.startDate.format('YYYY-MM-DD');

            console.log('START DATE HERE', start_date)
            let end_date = picker.endDate.format('YYYY-MM-DD')
            console.log('applied', start_date, end_date)

            voronoi_viz.update_url(voronoi_viz.site_db.selected_site.node_acp_id, start_date)
            voronoi_viz.hud.show_node_information(voronoi_viz, voronoi_viz.site_db.selected_site.node_acp_id, start_date, end_date);

        });

        $('input[name="datefilter"]').on('cancel.daterangepicker', function (ev, picker) {
            $(this).val('');
        });

    };

    //------------------------------------------//
    //--------------- HELPERS-------------------//
    //------------------------------------------//


    //displays node's neighbors and the speed to and from them
    show_node_metadata(voronoi_viz, site_id) {
        //find the requested site_id in the SITE_DB
        let site = voronoi_viz.site_db.all.find(x => x.node_acp_id == site_id);
        voronoi_viz.hud.get_site_metadata(voronoi_viz, site)
    }

    //queries node's neighbors and the speed to and from them
    get_site_metadata(voronoi_viz, SITE) {
        let neighbour_info = "<b>Surrounding nodes:</b> " + "<br>";

        //iterate over all the site's neighbours
        for (let u = 0; u < SITE.neighbors.length; u++) {
            let neighbour = SITE.neighbors[u];

            //find link ids to and from them
            let link_in = voronoi_viz.site_db.all_journeys.find(journey => journey.id === neighbour.links.in.id)
            let link_out = voronoi_viz.site_db.all_journeys.find(journey => journey.id === neighbour.links.out.id)

            //travelTime in, travelTime out
            let tt_in, tt_out;

            //try/catch to avoid undefined values for travel times
            try {
                if (link_in.travelTime == undefined || link_in.travelTime == null) {
                    tt_in = link_in.normalTravelTime;
                } else {
                    tt_in = link_in.travelTime;
                }

                //calculate speed 
                let speed_in = parseInt((neighbour.links.in.length / tt_in) * voronoi_viz.tools.TO_MPH);

                if (link_out.travelTime == undefined || link_out.travelTime == null) {
                    tt_out = link_out.normalTravelTime;
                } else {
                    tt_out = link_out.travelTime;
                }

                //calculate speed 
                let speed_out = parseInt((neighbour.links.out.length / tt_out) * voronoi_viz.tools.TO_MPH);

                //innerHTML code foe every node
                let to = voronoi_viz.tools.HALF_TAB + "<div class='metadata' id='META_" + neighbour.links.in.id + "'>" + voronoi_viz.tools.TAB + "<b>To:</b> " + "Current Speed: " + "<b>" + speed_in + "</b>" + "MPH" + "</div>";
                let from = voronoi_viz.tools.HALF_TAB + "<div class='metadata' id='META_" + neighbour.links.out.id + "'>" + voronoi_viz.tools.TAB + "<b>From:</b> " + "Current Speed: " + "<b>" + speed_out + "</b>" + "MPH" + "</div>";
                neighbour_info += "<br>" + "<i>" + neighbour.site + "</i>" + to + from;

            } catch (err) {
                console.log("metadata_error:\n", err.message)
                console.log("(usually happens when sensor data is missing, not a big deal)")
            }
        }

        //innerHTML code for all metadata
        let full_metadata = "<b>" + SITE.name + "</b>" + '<br>' +
            "Average Travel Speed: " + parseInt(SITE.travelSpeed) + "MPH" + '<br>' +
            "Speed Deviation from Regular: " + parseInt(SITE.speedDeviation) + "MPH" + '<br><br>' + neighbour_info;

        document.getElementById('metadata_table').innerHTML = voronoi_viz.tools.ICON_CLOSE_DIV + full_metadata;
        document.getElementById('metadata_table').style.opacity = 1;
    }

    //------------------------------------------//
    //---------------/HELPERS-------------------//
    //------------------------------------------//


    //---------------------------------------------------//
    //---------------------LINE GRAPH--------------------//
    //---------------------------------------------------//

    show_line_plot(voronoi_viz, route_data, min_max, site_name, START, END) {
        // set the dimensions and margins of the graph
        var margin = {
                top: 30,
                right: 100,
                bottom: 45,
                left: 40
            },
            width = 500 - margin.left - margin.right,
            height = 300 - margin.top - margin.bottom;

        //MAKE SURE THE DIV IS EMPTY and visible
        document.getElementById('line_graph').innerHTML = voronoi_viz.tools.ICON_CLOSE_DIV;
        document.getElementById('line_graph').style.opacity = 1;

        // append the svg object to the body of the page
        voronoi_viz.hud.svg_line_graph = d3.select("#line_graph")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        voronoi_viz.hud.x_scale = d3.scaleLinear()
            .domain([min_max.min_x, min_max.max_x])
            .range([0, width]);

        let x_axis = d3.axisBottom(voronoi_viz.hud.x_scale).ticks(27).tickFormat(function (d, i) {
            let event = new Date(d * 1000);
            let options = {
                month: 'numeric',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric'
            };
            let humanDateFormat = event.toLocaleDateString('en-GB', options)

            return humanDateFormat;
        });

        //change "end" date to '' if it's identical to "start"
        END = (END == undefined) || (END == START) ? '' : END;

        //add graph title
        voronoi_viz.hud.svg_line_graph.append("text")
            .attr("x", (width / 2))
            .attr("y", 0 - (margin.top / 2))
            .attr("text-anchor", "middle")
            .style("font-size", "12px")
            .style("text-decoration", "none") //underline  
            .text(site_name + " on " + START + ' ' + END);

        // text label for the y axis
        voronoi_viz.hud.svg_line_graph.append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 0 - margin.left)
            .attr("x", 0 - (height / 2))
            .attr("dy", "1em")
            .style("text-anchor", "middle")
            .text("Speed (MPH)");

        //add x axis ticks
        voronoi_viz.hud.svg_line_graph.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(x_axis)
            .selectAll("text")
            .style("text-anchor", "end")
            .attr("dx", "-.8em")
            .attr("dy", ".15em")
            .attr("transform", function (d) {
                return "rotate(-30)"
            });

        // Add Y axis
        let y_padding = 20; // padding to offset the max values on the y axis

        voronoi_viz.hud.y_scale = d3.scaleLinear()
            .domain([0, min_max.max_y + y_padding]) //[min_max.min_y - y_padding, min_max.max_y + y_padding]
            .range([height, 0]);

        voronoi_viz.hud.svg_line_graph.append("g")
            .call(d3.axisLeft(voronoi_viz.hud.y_scale));

        let legend_keys = [];

        //iterate over the list of route data and add legend entries
        for (let u = 0; u < route_data.length; u++) {
            let route_acp_id = route_data[u][0].acp_id;

            // Add the line
            let path = voronoi_viz.hud.create_path(voronoi_viz, route_data[u], route_acp_id, voronoi_viz.tools.LINE_GRAPH_COLORS[u]);
            d3.select('#META_' + route_acp_id).style('color', voronoi_viz.tools.LINE_GRAPH_COLORS[u])

            // Add the legend key.
            //27 is th length of a route id, whereas 12 martks the star of the unique string in "CAMBRIDGE_JTMS_9800Z0SUAHN1"
            legend_keys.push({
                'name': route_acp_id.substr(27 - 12, 27), //name of the legend entry
                'color': voronoi_viz.tools.LINE_GRAPH_COLORS[u] //text color of the legend entry
            });

        }

        //add final legend entry for past historical data
        legend_keys.push({
            'name': 'Past Data (Click)',
            'color': 'DarkGrey'
        });

        // Add one dot in the legend for each name.
        let size = 15 //rectangle size
        let y_sizing = 0 //y offset for legend rects
        let x_sizing = 360 //x offset for legend rects

        //add text for the legend entries
        voronoi_viz.hud.svg_line_graph.selectAll("mylabels")
            .data(legend_keys)
            .enter()
            .append("text")
            .attr("x", x_sizing + size * 1.2)
            .attr("y", function (d, i) {
                return y_sizing + i * (size + 5) + (size / 2) //creates a gap between different rects on the legend
            })
            .style("fill", function (d) {
                return d.color
            })
            .text(function (d) {
                return d.name
            })
            .attr("text-anchor", "left")
            .style("alignment-baseline", "middle")
            .style("font-size", "10px")
            .attr("class", function (d) {
                if (d.name == 'Past Data (Click)') return 'hist_legend_text' // make the historical legend different class
                else return "legend_text";
            });

        // Add one dot in the legend for each name.
        voronoi_viz.hud.svg_line_graph.selectAll("mydots")
            .data(legend_keys)
            .enter()
            .append("rect")
            .attr("x", x_sizing)
            .attr("y", function (d, i) {
                return y_sizing + i * (size + 5) ///size+5 is the distance between legend rects
            })
            .attr("width", size)
            .attr("height", size)
            .style("fill", function (d) {
                if (d.name == 'Past Data (Click)') return 'white'
                else return d.color
            })
            .style("stroke-dasharray", function (d) {
                if (d.name == 'Past Data (Click)') return ("3,3") // make the stroke dashed
            })
            .style("stroke", function (d) {
                if (d.name == 'Past Data (Click)') return 'black' // make the stroke dashed
                //no need to have else as other entries have no stroke, only fill
            })
            .attr("id", function (d, i) {
                return "LEGEND_CAMBRIDGE_JTMS_" + d.name
            })
            .attr("class", function (d) {
                if (d.name == 'Past Data (Click)') return 'hist_legend' // make the historical legend different class
                else return "legend";
            })

        //Add interactivity for linegraph
        voronoi_viz.hud.svg_line_graph.selectAll(".legend_text, .legend")
            .on('mouseover', function (d, i) {
                let selected = 'CAMBRIDGE_JTMS_' + d.name

                // Use D3 to select element, change color and size
                d3.selectAll('.legend').transition().duration(250).style('opacity', 0.2)
                d3.selectAll('.connected_scatter_line').transition().duration(250).style('opacity', 0.2)
                d3.select('#LEGEND_' + selected).transition().duration(250).style('opacity', 1)
                d3.select('#LG_' + selected).transition().duration(250).style('opacity', 1).attr("stroke-width", 4);
                voronoi_viz.draw_link(voronoi_viz, selected, 350, d.color);

            })
            .on('mouseout', function (d) {
                let selected = 'CAMBRIDGE_JTMS_' + d.name
                // Use D3 to select element, change color and size
                d3.selectAll('.legend').transition().duration(250).style('opacity', 1)
                d3.selectAll('.connected_scatter_line').transition().duration(250).style('opacity', 1)
                d3.select('#LG_' + selected).attr("stroke-width", 2.5);
                voronoi_viz.link_group.remove();
                d3.selectAll('.arc_line').remove()
                d3.selectAll('.dashed_scatter_line').remove()
            })
            .on('click', function (d, i) {

                //add transition animation for clicked legend items
                d3.select(this).transition()
                    .duration(50)
                    .style('fill', 'black')
                    .on('end', function (d) {
                        d3.select(this).transition()
                            .duration(200)
                            .style('fill', d.color)
                    });

                //add transition animation for historical legend text
                d3.select(".hist_legend_text").transition()
                    .duration(50)
                    .style('fill', 'black')
                    .on('end', function (d) {
                        d3.select(this).transition()
                            .duration(200)
                            .style('fill', d.color)
                    });

                //add transition animation for historical legend rectangle
                d3.select(".hist_legend").transition()
                    .duration(50)
                    .style('fill', 'black')
                    .on('end', function (d) {
                        d3.select(this).transition()
                            .duration(200)
                            .style('fill', "white")
                    });

                //set link id for the clicked rectangle/text
                let link_id = "CAMBRIDGE_JTMS%7C" + d.name

                //get the date that's a week ago
                let week_ago = (Date.parse(START) / 1000) - voronoi_viz.tools.WEEK
                let new_ts = new Date(week_ago * 1000)
                let new_date = new_ts.getFullYear() + "-" + (new_ts.getMonth() + 1) + "-" + new_ts.getDate()

                //fetch historical data on click
                voronoi_viz.hud.historical_link(link_id, new_date).then((data) => {

                    let hist_data = voronoi_viz.hud.restructure_hist_data(voronoi_viz, [data]);
                    let route_acp_id = 'DASH_' + hist_data[0].acp_id;

                    // Add the line that represents the speed from the week before
                    let normal_speed_line = voronoi_viz.hud.create_path(voronoi_viz, hist_data, route_acp_id, 'black', 'historical')
                });

            });

        //add interactivity for the line graph lines, that on hover draw the links on the voronoi diagram
        d3.selectAll('.connected_scatter_line')
            .on('mouseover', function (d, i) {
                // Use D3 to select element, change color and size
                d3.selectAll('.connected_scatter_line').transition().duration(250).style('opacity', 0.2)
                d3.select(this).transition().duration(250).style('opacity', 1).attr("stroke-width", 4);
                voronoi_viz.draw_link(voronoi_viz, d[0].acp_id, 350, voronoi_viz.tools.LINE_GRAPH_COLORS[i]);
            })
            .on('mouseout', function () {
                // Use D3 to select element, change color and size
                d3.selectAll('.connected_scatter_line').transition().duration(250).style('opacity', 1)
                d3.select(this).attr("stroke-width", 2.5);
                voronoi_viz.link_group.remove();
                d3.selectAll('.arc_line').remove()
            });

    }

    //creates a path (line) that is rendered on the linegraph to represent
    //the travel speed for each link. "Mode" indicates if the line is historical (dashed and black)
    //or regular(even and colored)
    create_path(voronoi_viz, data, id, stroke, mode) {

        // Add the path (line)
        let path = voronoi_viz.hud.svg_line_graph.append("path")
            .datum(data)
            .attr("fill", "none")
            .attr("id", "LG_" + id) //LG stands for Line Graph
            .attr("stroke", stroke)
            .attr("stroke-width", 2.5)
            .attr("d", d3.line()
                .x(function (d) {
                    let time_parameter = mode == 'historical' ? d.ts + voronoi_viz.tools.WEEK : d.ts;
                    return voronoi_viz.hud.x_scale(time_parameter)
                })
                .y(function (d) {
                    let speed_parameter = mode == 'historical' ? d.normal_speed : d.speed;
                    return voronoi_viz.hud.y_scale(speed_parameter)
                })
            );

        let totalLength = path.node().getTotalLength();

        //check if mode argument is provided as "historical". For regular lines, we pass no argument at all
        if (mode) { //in js undefined returns a false boolean
            let dash_step = 3;
            path
                .attr("class", "dashed_scatter_line")
                .attr("stroke-dasharray", dash_step + " " + dash_step)
                .attr("stroke-dashoffset", 0)
                .style('opacity', 0)
                .transition()
                .duration(350)
                .ease(d3.easeLinear)
                .style('opacity', 1)
        } else {
            path
                .attr("class", "connected_scatter_line")
                .attr("stroke-dasharray", totalLength + " " + totalLength)
                .attr("stroke-dashoffset", totalLength)
                .transition()
                .duration(700)
                .ease(d3.easeLinear)
                .attr("stroke-dashoffset", 0);
        }
        return path
    }

    //---------------------------------------------------//
    //--------------------/LINE GRAPH--------------------//
    //---------------------------------------------------//


    //---------------------------------------------------//
    //----------------DATA RESTRUCTURING-----------------//
    //---------------------------------------------------//

    //restructures queried historical data received from the API to into a 
    //format that is more usbale in the visualisation context
    restructure_hist_data(voronoi_viz, unstr_fetched_data) {
        let structured_data = []

        unstr_fetched_data.forEach(item => {

            let elements = item.request_data;

            elements.forEach(element => {

                let link_length = voronoi_viz.site_db.all_links.find(x => x.acp_id === element.id).length;

                //ignoring entries that have a longer travel time than 500, so to avoid spikes in data.
                if ((element.travelTime < 500) && (element.travelTime > 0)) {

                    structured_data.push({
                        'id': element.id,
                        'acp_id': element.id.replace('|', '_'),
                        "ts": element.acp_ts,
                        "travel_time": element.travelTime,
                        "normal_travel_time": element.normalTravelTime,
                        "speed": (link_length / element.travelTime) * voronoi_viz.tools.TO_MPH,
                        "normal_speed": (link_length / element.normalTravelTime) * voronoi_viz.tools.TO_MPH,
                        "time": element.time.slice(11, 20),
                        "date": element.time.slice(0, 10),
                        "length": link_length
                    })
                }
            })
        })
        return structured_data;
    }

    //The fetched data has a problem that it does not differentiate different
    //links into different sublists, instead, we recieve all date in a single
    //list that makes creating separate line graphs difficult.
    //Therefore, we parse the fetched data and create unique sublists with 
    //each acp_id having its own list.
    restructure_to_sublists(old_list) {
        let new_list = []
        let new_sublist = [];

        //create a separate array for used acp_ids as 
        //sometimes there are doubles that will create
        //problems for the scatter plot.
        //Doubles appear beacause some links have "-fixed"
        //clones in the API, so we just avoid them.
        let past_ids = [];

        let temp_id = old_list[0].acp_id;

        //iterate over a list of fetched readings that have 
        //all acp_id's in a single list
        for (let i = 0; i < old_list.length; i++) {
            let current_id = old_list[i].acp_id;

            //ignore the doubled link readings
            if (past_ids.includes(current_id)) {
                continue;
            }

            //new acp_id incoming, start a new list
            if (current_id != temp_id) {
                //put the last value to past ids to ensure
                //we don't have duplicates
                past_ids.push(temp_id)

                temp_id = current_id;

                //sort the new sublist by ts
                new_list.push(new_sublist.sort((a, b) => a.ts - b.ts))

                new_sublist = [];
            }

            //push items with the same acp_id to a single list
            new_sublist.push(old_list[i]);
        }

        //the last unique acp_id does not get pushed by itself
        //since no new entry follows, so we do it here instead.
        new_list.push(new_sublist.sort((a, b) => a.ts - b.ts))

        //returns a list of lists containing unique acp_ids in each
        return new_list;
    }

    //---------------------------------------------------//
    //---------------/DATA RESTRUCTURING-----------------//
    //---------------------------------------------------//

    //---------------------------------------------------//
    //-------------------ASYNC FUNCTIONS-----------------//
    //---------------------------------------------------//

    //fetches historical data for links, based on a single or two dates
    //that indicate either a single day, or a period
    async historical_link(link_id, date1, date2) {

        if (date2 != undefined) {

            return await d3.json(

                HISTORICAL_API + link_id +
                "/?start_date=" + date1 + "&end_date=" + date2, {
                    headers: new Headers({
                        "Authorization": `Token ` + API_TOKEN
                    }),
                })
        } else {

            return await d3.json(

                HISTORICAL_API + link_id +
                "/?start_date=" + date1, {
                    headers: new Headers({
                        "Authorization": `Token ` + API_TOKEN
                    }),
                })
        }
    }

    async get_node_data(voronoi_viz, site_id, date_start, date_end) {

        //find the requested site_id in the SITE_DB
        let site = voronoi_viz.site_db.all.find(x => x.node_acp_id == site_id);
        let site_name = site.name;

        //lookup neighbours and iterate through them in both directions
        let queried_links = []
        for (let i = 0; i < site.neighbors.length; i++) {

            //We have two directions for every node, so that is how we query data for it.
            //Also replace the vertical bars so we have a valid string we can use to query.
            let id_out = site.neighbors[i].links.in.acp_id.replace('|', '%7C');
            let id_in = site.neighbors[i].links.out.acp_id.replace('|', '%7C');

            //fetch data for both directions and push it to 
            voronoi_viz.hud.historical_link(id_out, date_start, date_end).then((data) => {
                queried_links.push(data)
            });
            voronoi_viz.hud.historical_link(id_in, date_start, date_end).then((data) => {
                queried_links.push(data)
            });
        }

        //wait until all primises have been resolved and then start restructuring the raw data
        voronoi_viz.hud.await_promises(voronoi_viz, queried_links.length, site.neighbors.length).then(() => {

            //Restructure the data to be dictionary-based for easier access.
            //We will later restructure the data again to sublists, to render historical
            //link data as a part of the line graph
            let hist_data = voronoi_viz.hud.restructure_hist_data(voronoi_viz, queried_links);

            //get the data ranges, so we know how to draw the graph
            let min_max = {
                'min_x': Math.min(...hist_data.map(a => a.ts)),
                'min_y': Math.min(...hist_data.map(a => a.speed)),
                'max_x': Math.max(...hist_data.map(a => a.ts)),
                'max_y': Math.max(...hist_data.map(a => a.speed))
            }

            //starts x axis at midnight
            min_max.min_x = voronoi_viz.tools.to_timestamp(date_start + " 00:00:00")

            //if queried data is for today, our x axis should still show 24hours
            if (min_max.max_x - min_max.min_x < 86399) { //86400seconds==24hours
                min_max.max_x = min_max.min_x + 86400;
            }

            //Restructuring data for individual links and drawing them on screen.
            //try/catch to avoid empty data strings from crapping out on the linegraph
            try {
                let restructured_route_data = voronoi_viz.hud.restructure_to_sublists(hist_data)
                voronoi_viz.hud.show_line_plot(voronoi_viz, restructured_route_data, min_max, site_name, date_start, date_end);
            } catch (err) {
                console.log('Error message', err)
                document.getElementById('line_graph').innerHTML = "No data received";
                document.getElementById('line_graph').style.opacity = 1;
            }
        })
    }


    //await_promises() is used to check that all promises have been
    //resolved by evaluating the two condition arguments
    async await_promises(voronoi_viz, cond1, cond2) {
        //console.log('waiting to resolve promises');
        await voronoi_viz.hud.waitForCondition({
            asked: cond1,
            asnwered: cond2
        })
        //console.log('promises have been resolved');
    }


    //wait for condition work with await_promises() to
    //check that promises have been resolved. We set
    //a timeout every second to check the conditional
    //statement.
    async waitForCondition(conditionObj) {
        let start_time = new Date().getTime()

        while (true) {
            //arg and test are the two parameters that 
            //have the conditional information on promises
            if (conditionObj.asked == conditionObj.asnwered) {
                break; // or return
            }
            if (new Date() > start_time + 2000) {
                break; // or throw
            }
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
    }

    //---------------------------------------------------//
    //------------------/ASYNC FUNCTIONS-----------------//
    //---------------------------------------------------//

}